" SECURITY
"{{{
set nomodeline
set nocompatible
"}}}
" CHECKUP
"{{{
let $VIMDIR=$HOME.'/.vim/'

if exists('*mkdir')
    if !isdirectory($VIMDIR)
        call mkdir($VIMDIR)
    endif
    for subdir in ['backup', 'session', 'plugged', 'snippets', 'spell', 'swap', 'undo']
        if !isdirectory($VIMDIR.subdir)
            call mkdir($VIMDIR.subdir)
        endif
    endfor
endif
"}}}
" SETTINGS
"{{{
""" DISPLAY"{{{
set mouse=a
set confirm
set splitright
set splitbelow
set scrolloff=10
set sidescrolloff=5
"}}}
""" THEMING"{{{
set title
set showcmd
set showmode
set noshowmatch
set t_Co=256
set conceallevel=2
set background=dark
" set colorcolumn=100
let g:loaded_matchparen=1
"}}}
""" SIDEBAR"{{{
set ruler
set number
set relativenumber
"}}}
""" STATUSBAR"{{{
set wildmenu
set shortmess=c
set laststatus=2
set wildmode=full
set wildignore+=*.pdf,*.bbl,*.aux,*.pyc
"}}}
""" FOLDING"{{{
set foldlevel=20
set foldmethod=marker
set foldlevelstart=10
"}}}
""" WRAPPING"{{{
set wrap
set linebreak
set textwidth=0
"}}}
""" EDITION"{{{
set hidden
set autoread
set autowrite
set autowriteall
set encoding=utf-8
set ffs=unix,dos,mac
set clipboard=unnamedplus
set suffixes=.swp,.jpg,.png,.jpeg,.gif,.pyc,.pyo
"}}}
""" NAVIGATION"{{{
set gdefault
set hlsearch
set incsearch
set smartcase
set ignorecase
set nojoinspaces
set nostartofline
"}}}
""" IDENTATION"{{{
set expandtab
set autoindent
set copyindent
set shiftround
set tabstop=4 
set shiftwidth=4
set softtabstop=4
set backspace=indent,eol,start
"}}}
""" NOTIFICATION"{{{
set noerrorbells
set novisualbell
"}}}
""" PERFORMANCE"{{{
set ttyfast
set lazyredraw
"}}}
""" BACKUP"{{{
set backup
set undofile
set updatecount=100
set undodir=$VIMDIR/undo/
set directory=$VIMDIR/swap/
set backupdir=$VIMDIR/backup/
set viminfo ='200,n$VIMDIR/viminfo
"}}}
"}}}
" PLUGINS
"{{{
syntax enable
filetype plugin on
filetype indent on

if !empty(glob($HOME.'/.vim/autoload/plug.vim'))
call plug#begin($HOME.'/.vim/plugged')
""" DISPLAY"{{{
Plug 'tomasr/molokai'
Plug 'bling/vim-airline' 
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_save_on_switch = 1
"}}}
""" BASIC"{{{
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-scripts/matchit.zip'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_smartcase = 1
Plug 'christoomey/vim-sort-motion'
Plug 'michaeljsmith/vim-indent-object'
"}}}
""" IDE FEATURES"{{{
" Plug 'janko-m/vim-test'
" let g:test#preserve_screen = 1
" let test#python#runner = 'pytest'
Plug 'SirVer/ultisnips'
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsSnippetsDir = $HOME.'/.vim/snippets/'
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --bin'}
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdtree' 
let NERDTreeIgnore=['\.pyc$', '\~$']
Plug 'jistr/vim-nerdtree-tabs'
" Plug 'Chiel92/vim-autoformat'
" let g:formatters_python = ['yapf']
" Plug 'scrooloose/syntastic'
" set statusline+=%*
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" let g:syntastic_check_on_wq = 0
" let g:syntastic_check_on_open = 0
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_python_checkers=['flake8']
" Plug 'Valloric/YouCompleteMe', {'dir': $HOME.'/.vim/plugged/YouCompleteMe/', 'do': './install.py'}
" let g:ycm_goto_buffer_command = 'new-or-existing-tab'
" let g:ycm_autoclose_preview_window_after_completion= 1
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"}}}
"""" PROGRAMMING LANGUAGE"{{{
Plug 'godlygeek/tabular'
Plug 'sheerun/vim-polyglot'
Plug 'plasticboy/vim-markdown'
Plug 'beloglazov/vim-online-thesaurus'
"}}}
call plug#end()
try
colorscheme molokai
catch
endtry
endif
"}}}
" HOOKS
"{{{
"""  automaticaly save buffers on focus lost
autocmd! FocusLost * silent! wa

""" specific to Python files
autocmd! BufNewFile,BufRead *.py setlocal foldmethod=indent

""" disable auto-comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" """ automatic add spelling and wrapping on open, read and save
" autocmd! BufNewFile,BufRead *.{txt,tex,rst,md} setlocal spell spelllang=en textwidth=100 whichwrap+=h,l,<,>,[,]

""" restore last position of the cursor when opening a file
autocmd! BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
"}}}
" KEYBINDINGS
 "{{{
""" LEADER KEYS"{{{
map ; :
vmap ; :
noremap ;; ;
let mapleader="\<Space>"
let maplocalleader=","
 "}}}
""" BREAK HABITS"{{{
":inoremap <Esc> <NOP>
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
"}}}
""" BETTER DEFAULT"{{{
map Y y$
map U <C-r>
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap / /\v
vnoremap / /\v
xnoremap <  <gv
xnoremap >  >gv
inoremap jk  <Esc>
inoremap kj  <Esc>
nnoremap Q :q!<CR>
nnoremap zj o<Esc>k
nnoremap zk O<Esc>j
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
nnoremap <silent> <ESC> :nohl<CR>
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]
 "}}}
""" BASIC ACTIONS"{{{
nnoremap <leader>z za
nnoremap <leader>Z zM
nnoremap <leader>? :help 
nnoremap <leader>e :tabedit 
nnoremap <silent> <leader>p :put<CR> 
vnoremap <silent> <leader>s :sort<CR>
nnoremap <silent> <leader>j :join<CR>
vnoremap <silent> <leader>j :join<CR>
nnoremap <silent> <leader>m :make<CR>
"}}}
""" ADVANCED ACTIONS"{{{
"""""" prettify json file
nnoremap <leader>J :%!python -m json.tool<CR>
"""""" execute shell command
nnoremap <leader>! :!
nnoremap <leader>R :r!
"""""" format current buffer
nnoremap <leader>+ gggqG
"""""" format inside paragrah
nnoremap <leader>= gqip
""""""" highlight last inserted text
nnoremap <leader>v `[v`]
""""""" switch between the last two files
nnoremap <leader>k <c-^>
""""""" get answer from the internet
nnoremap <leader>y :!howdoi 
"""""" write a file as sudo
nnoremap <leader>W :w !sudo tee > /dev/null %<CR>
"""""" add spelling for en/fr
nnoremap <silent> <leader>C :setlocal spell! spelllang=en,fr<CR>
"""""" edit the current macro
nnoremap <leader>@  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>
"}}}
""" TAB MANAGEMENT"{{{
nnoremap <silent> K :tabnext<CR>
nnoremap <silent> J :tabprevious<CR>
"}}}
""" BUFFER MANAGEMENT"{{{
nnoremap <silent> H <C-e>
nnoremap <silent> L <C-y>
nnoremap <silent> <leader><Tab> :bnext<cr>
nnoremap <silent> <leader><S-Tab> :bprevious<cr>
"}}}
""" WINDOWS MANAGEMENT"{{{
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent> <leader>H :split<CR>
nnoremap <silent> <leader>V :vsplit<CR>
"}}}
""" PLUGINS MANAGEMENT"{{{
nnoremap <silent> <leader>PI :PlugInstall<CR>
nnoremap <silent> <leader>PG :PlugUpgrade<CR>
nnoremap <silent> <leader>PU :PlugUpdate<CR>
nnoremap <silent> <leader>PS :PlugStatus<CR>
nnoremap <silent> <leader>PC :PlugClean<CR>
nnoremap <silent> <leader>PL :PlugList<CR>
nnoremap <silent> <leader>PD :PlugDocs<CR>
nnoremap <leader>PR :source $MYVIMRC<CR>
"}}}
""" PLUGINS CONFIGURATIONS"{{{
"""""" go to
nmap s <Plug>(easymotion-s2)
nnoremap <silent> <leader>/ :Ag<CR>
nnoremap <silent> <leader>T :Tags<CR>
nnoremap <silent> <leader>t :BTags<CR>
nnoremap <silent> <leader>' :Marks<CR>
nnoremap <silent> <leader>L :Lines<CR>
nnoremap <silent> <leader>l :BLines<CR>
nnoremap <silent> <leader>F :GFiles<CR>
nnoremap <silent> <leader>f :Files .<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>h :History<CR>
nnoremap <silent> <leader>w :Windows<CR>
nnoremap <silent> <leader>i :Snippets<CR>
nnoremap <silent> <leader>c :Commands<CR>
" nnoremap <silent> <leader>g :YcmCompleter GoTo<CR>
" nnoremap <silent> <leader>d :YcmCompleter GetDoc<CR>
""""""" lookup
nnoremap <leader>U :Thesaurus 
nnoremap <leader>u :OnlineThesaurusCurrentWord<CR>
" """"""" testing
" nnoremap <silent> <localleader>f :TestFile<CR>
" nnoremap <silent> <localleader>l :TestLast<CR>
" nnoremap <silent> <localleader>s :TestSuite<CR>
" nnoremap <silent> <localleader>g :TestVisit<CR>
" nnoremap <silent> <localleader>t :TestNearest<CR>
""""""" toggling
nnoremap <silent> <leader>; :TagbarToggle<CR>
nnoremap <silent> <leader>` :NERDTreeTabsToggle<CR>
" nnoremap <silent> <leader>- :SyntasticToggleMode<CR>
""""""" formatting
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
nnoremap <silent> <leader>A :Tab 
" nnoremap <silent> <leader>DD :Pandoc
" nnoremap <silent> <localleader>i :Isort<CR>
" nnoremap <silent> <leader>q :Autoformat<CR>
nnoremap <silent> <leader>a= :Tabularize /=
vnoremap <silent> <leader>a= :Tabularize /=
nnoremap <silent> <leader>a/ :Tabularize /|
vnoremap <silent> <leader>a/ :Tabularize /|
" nnoremap <silent> <leader>DP :autocmd! BufWrite <buffer> :Pandoc pdf<CR> 
" nnoremap <silent> <leader>DH :autocmd! BufWrite <buffer> :Pandoc html5<CR> 
""""""" session management
nnoremap <silent> <leader>SL :SLoad<CR>
nnoremap <silent> <leader>SS :SSave<CR>
nnoremap <silent> <leader>SC :SClose<CR>
nnoremap <silent> <leader>SD :SDelete<CR>
""""""" other plugin configuration
" nnoremap <silent> <leader>G :Goyo<CR>
nnoremap <silent> <leader>I :UltiSnipsEdit<CR>
"}}}
""" INTERNAL CONFIGURATIONS"{{{
nnoremap <leader>MR :source $MYVIMRC<CR>
nnoremap <silent> <leader>MB :buffers<CR>
nnoremap <silent> <leader>ML :message<CR>
nnoremap <silent> <leader>MP :register<CR>
nnoremap <silent> <leader>MM :tabedit $MYVIMRC<CR>
"}}}
"}}}
