" vim: fdm=marker
" STARTING {{{
if !exists(" $VIMDIR" )
    let $VIMDIR=$HOME.'/.vim/'
endif
" }}}
" CHECKING {{{
set nocompatible
" }}}
" SETTING {{{
"" DIRS {{{
set autochdir
" }}}
"" FILES {{{
set path+=**
set encoding=utf-8
set ffs=unix,dos,mac
set suffixes=.swp,.jpg,.png,.jpeg,.gif,.pyc,.pyo
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" }}}
"" RULER {{{
set relativenumber
" }}}
"" STATUS {{{
set statusline=%t\ %c,%l/%L\ %P\%=%r%y\ [%{&ff}]\ [%{strlen(&fenc)?&fenc:'none'}]\ %m
" }}}
"" WINDOW {{{
set splitright
set splitbelow
set shortmess=I
set synmaxcol=1000
set background=dark
" }}}
"" EDITING {{{
set hidden
set confirm
set autoread
set autowrite
set linebreak
set autowriteall
set nojoinspaces
set nostartofline
set clipboard=unnamedplus
" }}}
"" SEARCHING {{{
set gdefault
set wrapscan
set hlsearch
set incsearch
set showmatch
set smartcase
set ignorecase
" }}}
"" FOLDING {{{
set foldmethod=marker
set foldlevelstart=99
" }}}
"" SPELLING {{{
set spell
set spelllang=en,fr
" }}}
"" NAVIGATION {{{
set scrolloff=10
set sidescrolloff=5
" }}}
"" INDENTATION {{{
set smarttab
set expandtab
set autoindent
set copyindent
set shiftround
set tabstop=4 
set shiftwidth=4
set softtabstop=4
set backspace=indent,eol,start
" }}}
" COMPLETION {{{
set wildmenu
set completeopt=longest,menuone
set wildignore+=*.pdf,*.bbl,*.aux,*.pyc
" }}}
"" OPTIMIZATION {{{
set ttyfast
set lazyredraw
set shell=/bin/bash
" }}}
"" CONSERVATION {{{
set backup
set undofile
set history=1000
set backupext=-vimbackup
set undodir=$VIMDIR/undo/
set directory=$VIMDIR/swap/
set backupdir=$VIMDIR/backup/
set viminfo ='200,n$VIMDIR/viminfo
" }}}
" }}}
" BINDING {{{
"" LEADERS {{{
map ; :
vmap ; :
noremap ;; ;
let mapleader=" " 
let maplocalleader="," 
" }}}
"" DEFAULT {{{
noremap j gj
noremap k gk
noremap B g^
noremap E g$
noremap Y y$
noremap U <C-r>
noremap J <C-d>
noremap K <C-u>
nnoremap <CR> <C-e>
xnoremap < <gv
xnoremap > >gv
nnoremap Z :x<CR>
nnoremap Q :w<CR>:bd<CR>
nnoremap = gqap
nnoremap + gg=G
nnoremap zj o<Esc>k
nnoremap zk O<Esc>j
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
noremap gs :sort<CR>
noremap gj :join<CR>
noremap L :bnext<CR>
noremap H :bprevious<CR>
nnoremap <silent> <ESC> :nohl<CR>
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]
" }}}
"" COMMANDS {{{
nnoremap <leader>\ :set 
nnoremap <leader>j :find 
nnoremap <leader><Tab> <c-^>
nnoremap <leader>> :shell<CR>
nnoremap <leader># :set spell!<CR>
nnoremap <leader>' :edit $MYVIMRC<CR>
nnoremap <leader>" :source $MYVIMRC<CR>
nnoremap <leader>! :w !sudo tee > /dev/null %<CR>
nnoremap <leader>.m :setlocal foldmethod=marker<CR>
nnoremap <leader>.s :setlocal foldmethod=syntax<CR>
nnoremap <leader>.i :setlocal foldmethod=indent<CR>
nnoremap <leader>.p :setlocal filetype=python<CR>
nnoremap <leader>.t :setlocal filetype=text<CR>
nnoremap <leader>qp :!python3 %<CR>
nnoremap <leader>qt :!pytest % <CR>
nnoremap <leader>qd :!pydoc3 
nnoremap <leader>qt :!tldr 
nnoremap <leader>qq :!man 
" }}}
" }}}
" PLUGINS {{{
syntax enable
filetype plugin on
filetype indent on
if !empty(glob($VIMDIR.'/autoload/plug.vim'))
call plug#begin($VIMDIR.'/plugged')
"" fzf {{{
Plug 'junegunn/fzf',{'dir': '~/.fzf', 'do': './install --bin'}
Plug 'junegunn/fzf.vim'
nnoremap <leader>/ :Ag<CR>
nnoremap <leader>A :Tags<CR>
nnoremap <leader>a :BTags<CR>
nnoremap <leader>m :Marks<CR>
nnoremap <leader>L :Lines<CR>
nnoremap <leader>C :Colors<CR>
nnoremap <leader>l :BLines<CR>
nnoremap <leader>F :GFiles<CR>
nnoremap <leader>f :Files .<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>B :Filetypes<CR>
nnoremap <leader>y :BCommits<CR>
nnoremap <leader>Y :Commits<CR>
nnoremap <leader>w :Windows<CR>
nnoremap <leader>i :Snippets<CR>
nnoremap <leader>h :History<CR>
nnoremap <leader>: :History:<CR>
nnoremap <leader>; :History/<CR>
nnoremap <leader>? :Helptags<CR>
nnoremap <leader><Space> :Commands<CR>
let $FZF_DEFAULT_COMMAND = 'ag --hidden -p ~/.agignore -g "" '
" }}}
"" plug {{{
nnoremap <leader>pd :PlugDiff<CR>
nnoremap <leader>pc :PlugClean<CR>
nnoremap <leader>ps :PlugStatus<CR>
nnoremap <leader>pu :PlugUpdate<CR>
nnoremap <leader>pg :PlugUpgrade<CR>
nnoremap <leader>pi :PlugInstall<CR>
" }}}
"" notes {{{
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes'
let g:notes_suffix = '.md'
let g:notes_conceal_code = 0
let g:notes_directories = ['~/note']
let g:notes_title_sync = 'change_title'
nnoremap <leader>N :Note 
" }}}
"" sneak {{{
Plug 'justinmk/vim-sneak'
let g:sneak#label = 1
let g:sneak#s_next = 1
let g:sneak#use_ic_scs = 1
" }}}
"" vimux {{{
Plug 'benmills/vimux'
nnoremap <leader>r :VimuxPromptCommand<CR>
nnoremap <leader>R :VimuxRunLastCommand<CR>
" }}}
"" eunuch  {{{
Plug 'tpope/vim-eunuch'
nnoremap <leader>ox :Chmod 
nnoremap <leader>oc :Mkdir 
nnoremap <leader>oo :Rename 
nnoremap <leader>oD :Delete<CR>
" }}}
"" airline {{{
Plug 'bling/vim-airline' 
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
" }}}
"" molokai {{{
Plug 'tomasr/molokai'
let g:molokai_original = 1
" }}}
"" gitgutter {{{
Plug 'airblade/vim-gitgutter'
let g:gitgutter_grep = 'ag'
let g:gitgutter_map_keys = 0
nnoremap ]g <Plug>GitGutterNextHunk
nnoremap [g <Plug>GitGutterPrevHunk
" }}}
"" easy-align {{{
Plug 'junegunn/vim-easy-align'
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }}}
"" tmux-navigator {{{
Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_save_on_switch = 1
" }}}
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'lepture/vim-jinja'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'Raimondi/delimitMate'
Plug 'armergreg/vim-lastplace'
Plug 'vim-scripts/matchit.zip'
Plug 'christoomey/vim-sort-motion'
Plug 'michaeljsmith/vim-indent-object'
Plug 'coderifous/textobj-word-column.vim'
call plug#end()
endif
try
    colorscheme molokai
catch
    colorscheme darkblue
endtry
"" }}}
" PYTHON {{{
autocmd Filetype python setlocal foldmethod=indent
" }}}
