" BOOTSTRAP

set nocompatible                " disable vi compatibility
set nomodeline                  " security best pratice

let VIMDIR=$HOME.'/.vim/'

if exists('*mkdir')
    for f in ['swap', 'undo', 'bak']
        if !isdirectory(VIMDIR.f)
            call mkdir(VIMDIR.f)
        endif
    endfor
endif

" SETTINGS

"" interface
set so=10                       " activate a margin for vertical scrolling
set title                       " activate vim title on the current xterm
set mouse=a                     " activate mouse selection for every mode
set path+=**                    " provide tab-completion in a directory
set wildmenu                    " activate a menu for autocompletion
set wildmode=list:longest       "   (menu behaviour)
set clipboard^=unnamedplus      " all operations copy to the system
set nospell                     " deactivate inline spell check
set spelllang=en                "   (default spelling language)
set background=dark             " activate editor theming
set t_Co=256                    "   (add more colors)
set t_md=                       " no bold fonts
colorscheme industry            " set theme

"" display
set ruler                       " display cursor location
set number                      " display line numbers (gutter)
set showcmd                     " display already typed keys
set showmode                    " display the current mode
set noshowmatch                 " don't display matching parenthesis
let loaded_matchparen = 1       "   (same with nocompatible set)
set syntax=on                   " display syntaxic coloration
set laststatus=2                " display the status line (always)
set ttyfast                     " faster redrawing
set lazyredraw                  " don't display while executing macros (performance)
set splitright                  " put new vertical window on the right of the current buffer
set splitbelow                  " put horizontal window below the current buffer
set shortmess=a                 " use abbreviations for status messages
set relativenumber              " use relative line numbers

"" completion
set completeopt-=preview        " disable the preview completion window

"" indentation
set expandtab                   " insert spaces when hitting TABs
set shiftround                  " round indent value to a multiple of 'shiftwidth'
set autoindent                  " align the new line indent with the previous line
set tabstop=4                   " a hard TAB displays as 4 spaces
set shiftwidth=4                " operation >> indents 4 spaces; << unindents 4 spaces
set softtabstop=4               " insert/delete 4 spaces when hitting a TAB/BACKSPACE
set backspace=indent,eol,start  " allow backspacing over everything in insert mode

"" notification
set noerrorbells
set novisualbell
set t_vb=

"" search
set incsearch                   " show first match as the search proceeds
set nohlsearch                  " deactivate search highlighting
set ignorecase                  " case insensitivity
set smartcase                   "   (only when no upper letter is used)
set gdefault                    " replace all occurences in line by default (/g)
set wrapscan                    " searches wrap around end-of-file

"" wraping
set wrap                        " wrap text when text length > window size
set linebreak                   " don't break line in a middle of a word
set textwidth=0                 " don't use hard wrapping

"" folding
set foldlevel=20                " folding level
set foldmethod=indent           " folding behaviour

"" read/write
set encoding=utf-8              " default encoding
set ffs=unix,dos,mac            " default newline

"" saving/backup
set hidden                      " buffers can exist in background
set autowrite                   " write buffer on focus loss/make
set backup
set backupskip=
set updatecount=100
set undofile
set undodir=$HOME/.vim/undo/
set backupdir=$HOME/.vim/bak/
set directory=$HOME/.vim/swap/
set viminfo ='100,n$HOME/.vim/viminfo

" PLUGINS

filetype plugin indent on       " load plugins according to detected filetype
syntax on                       " enable syntax highlighting

" HOOKS

"" automatic text wrapping on open, read and save for the following files
autocmd BufNewFile,BufRead *.{txt,tex,md} setlocal textwidth=100 whichwrap+=h,l,<,>,[,]

"" automatic spell checking for the following files
autocmd BufNewFile,BufRead *.{txt,tex,md} setlocal spell spelllang=en

"" restore last cursor position when opening file
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" EXCLUSIONS

set suffixes=.jpg,.png,.jpeg,.gif,.bak,~,.swp,.swo,.o,.pyc
set wildignore+=*.fls,*.pdf,*.bbl,*.aux,*.dvi

" SHORTCUTS

"" set leader
let mapleader="\<Space>"
let maplocalleader="\\"
map ; :
vmap ; :
noremap ;; ;

"" break habits
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap Q g
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

"" sanner defaults
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>
xnoremap <  <gv
xnoremap >  >gv

"" basic actions
nnoremap <leader>z za
nnoremap <leader>R :r!
nnoremap <leader>r :reg<CR>
nnoremap <leader>b :buffer 
nnoremap <leader>B :ls<CR>
nnoremap <leader>E :edit<CR>
nnoremap <leader>e :tabedit 
nnoremap <leader>f :find 
nnoremap <leader>h :set hls!<CR>
nnoremap <leader>C :setlocal spell! spelllang=en,fr<CR>
nnoremap <leader>g gqip
nnoremap <leader>G gggqG
nnoremap <leader>? :help
nnoremap <leader>O :set ro<CR>

"" move around windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
nnoremap H gT
nnoremap L gt
nnoremap <leader>V :vsplit
nnoremap <leader>H :hsplit
nnoremap <leader>L :vnew<CR><c-w>h

"" zooming
command! Bigger  :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)+1', '')
command! Smaller :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)-1', '')

"" copy and paste
"nnoremap Y y$
"vmap <Leader>y "+y
"vmap <Leader>d "+d
"nmap <Leader>p "+p
"nmap <Leader>P "+P
"vmap <Leader>p "+p
"vmap <Leader>P "+P

"" hex editor
nnoremap <leader>#x :%!xxd<CR>
nnoremap <leader>#t :%!xxd -r<CR>

"" macros edition
nnoremap <leader>m  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>

"" quick accesses
nnoremap <leader>- :make<CR>
nnoremap <leader>S :source $MYVIMRC<CR>
nnoremap <leader>M :tabedit $MYVIMRC<CR>
