" SECURITY
syntax enable
set nomodeline
set nocompatible
filetype plugin indent on

let VIMDIR=$HOME.'/.vim/'

if exists('*mkdir')
    for subdir in ['backup', 'plugged', 'snippets', 'swap', 'undo']
        if !isdirectory(VIMDIR.subdir)
            call mkdir(VIMDIR.subdir)
        endif
    endfor
endif

" SETTINGS

""" BACKUP
set backup
set undofile
set updatecount=200
set undodir=$HOME/.vim/undo/
set directory=$HOME/.vim/swap/
set backupdir=$HOME/.vim/backup/
set viminfo ='200,n$HOME/.vim/viminfo

""" SEARCH
set gdefault
set incsearch
set smartcase
set ignorecase
set nohlsearch
set wildignore+=*.pdf,*.bbl,*.aux,*.pyc
set suffixes=.swp,.jpg,.png,.jpeg,.gif,.pyc,.pyo

""" EDITION
set autoread
set autowrite
set encoding=utf-8
set ffs=unix,dos,mac

""" DISPLAY
set title
set ruler
set number
set showcmd
set ttyfast
set mouse=a
set t_Co=256
set wildmenu
set showmode
set showmatch
set splitright
set splitbelow
set lazyredraw
set shortmess=a
set scrolloff=15
set laststatus=2
set relativenumber
set background=dark
set colorcolumn=120
set sidescrolloff=5
set clipboard=unnamedplus
set wildmode=list:longest
highlight ColorColumn ctermbg=5


""" FOLDING
set foldlevel=20
set foldmethod=indent
set foldlevelstart=10

""" WRAPPING
set wrap
set linebreak
set textwidth=0

""" IDENTATION
set expandtab
set autoindent
set shiftround
set tabstop=4 
set shiftwidth=4
set softtabstop=4
set backspace=indent,eol,start

""" NOTIFICATION
set noerrorbells
set novisualbell

" HOOKS

""" automatic spelling and wrapping on open, read and save
autocmd BufNewFile,BufRead *.{txt,tex,rst,md} setlocal spell spelllang=en textwidth=100 whichwrap+=h,l,<,>,[,]

""" restore last position of the cursor when opening a file
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif


" PLUGINS
call plug#begin($HOME.'/.vim/plugged')
""" IDE
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
nnoremap <leader>t :Tags<CR>
nnoremap <leader>l :BLines<CR>
nnoremap <leader>F :GFiles<CR>
nnoremap <leader>f :Files .<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>h :History<CR>
nnoremap <leader>w :Windows<CR>
nnoremap <leader>S :Snippets<CR>
nnoremap <leader>c :Commands<CR>
Plug 'mhinz/vim-startify'
Plug 'scrooloose/nerdtree' 
nnoremap <leader>` :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\~$']
Plug 'scrooloose/syntastic'
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_quiet_messages = { "type": "style" }
""" DISPLAY
Plug 'tomasr/molokai'
Plug 'bling/vim-airline' 
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
Plug 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
""" EDITION
Plug 'tpope/vim-repeat'
Plug 'SirVer/ultisnips'
nnoremap <leader>I :UltiSnipsEdit<CR>
let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsSnippetsDir = $HOME.'/.vim/snippets/'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-surround'
nmap <leader>n <Plug>CSurround
Plug 'tpope/vim-commentary'
xmap <leader>; <Plug>Commentary
nmap <leader>; <Plug>Commentary
Plug 'Raimondi/delimitMate'
nnoremap <leader>T :Tabularize 
Plug 'Valloric/YouCompleteMe'
nmap <leader>g :YcmCompleter GoTo<CR>
nmap <leader>d :YcmCompleter GetDoc<CR>
Plug 'junegunn/vim-easy-align'
xmap <leader>x <Plug>(EasyAlign)
nmap <leader>x <Plug>(EasyAlign)
Plug 'easymotion/vim-easymotion'
""" LANGUAGES
Plug 'vim-pandoc/vim-pandoc'
nnoremap <leader>P :Pandoc<CR>
Plug 'chase/vim-ansible-yaml'
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_no_default_key_mappings = 1
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'beloglazov/vim-online-thesaurus'
nnoremap <leader>k :OnlineThesaurusCurrentWord<CR>
let g:online_thesaurus_map_keys = 0
call plug#end()

colorscheme molokai

"Bundle 'scrooloose/syntastic'
"let g:syntastic_go_checkers=['']    " disable go checkers
"let g:syntastic_python_checkers=['frosted', 'pep8', 'python']
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_python_pep8_args = "--ignore=E265,E501,E702,F403"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"nnoremap <leader>! :SyntasticToggleMode<CR>

" KEYBINDINGS
 
""" LEADER KEYS
map ; :
vmap ; :
noremap ;; ;
let mapleader="\<Space>"
let maplocalleader="\\"
 
""" BREAK HABITS
nnoremap Q <NOP>
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>

""" SANNER DEFAULTS
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
xnoremap <  <gv
xnoremap >  >gv
cnoremap <c-p> <up>
cnoremap <c-n> <down>
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]
 
""" BASIC ACTIONS
nnoremap <leader>z za
nnoremap <leader>R :reg<CR>
nnoremap <leader>? :help 
nnoremap <leader>e :tabedit 
nnoremap <leader>j :join<CR>
vnoremap <leader>s :sort<CR>
nnoremap <leader>m :make<CR>

""" ADVANCED ACTIONS
" highlight last inserted text
nnoremap <leader>v `[v`]
"""""" refresh current buffer
nnoremap <leader>E :edit<CR>
"""""" execute shell command
nnoremap <leader>! :r!
"""""" format inside paragrah
nnoremap <leader>q gqip
""""""  add python breakpoint
nnoremap <Leader>B oimport ipdb; ipdb.set_trace()<C-c>k
"""""" format current buffer
nnoremap <leader>Q gggqG
"""""" set spelling for en/fr
nnoremap <leader>S :setlocal spell! spelllang=en,fr<CR>
"""""" edit the current macro
nnoremap <leader>@  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>

""" PLUGINS MANAGEMENT
nnoremap <leader>PI :PlugInstall<CR>
nnoremap <leader>PG :PlugUpgrade<CR>
nnoremap <leader>PU :PlugUpdate<CR>
nnoremap <leader>PS :PlugStatus<CR>
nnoremap <leader>PC :PlugClean<CR>
nnoremap <leader>PL :PlugList<CR>
nnoremap <leader>PD :PlugDocs<CR>

""" WINDOWS MANAGEMENT
map <S-k> <C-y>
map <S-j> <C-e>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader><Tab> gt
nnoremap <leader><S-Tab> gT
nnoremap <leader>H :split<CR>
nnoremap <leader>V :vsplit<CR>

""" INTERNAL CONFIGURATIONS
nnoremap <leader>M :message<CR>
nnoremap <leader>R :source $MYVIMRC<CR>
nnoremap <leader>C :tabedit $MYVIMRC<CR>
