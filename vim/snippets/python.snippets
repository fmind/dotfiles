# CORE
snippet from
	from ${1:package} import ${0:module}
snippet import
	import ${0:module}
snippet future
	from __future__ import ${0:module}
snippet class
	class ${1:class}(object):
		"""${2:docstring}"""
		def __init__(self):
			${3:super($1, self).__init__()}
			${0}
snippet defm
	def ${1:fun}(self):
		"""${2:docstring}."""
		${0}
snippet def
	def ${1:fun}():
		"""${2:docstring}."""
		${0}
snippet if
	if ${1:cond}:
		${0:${VISUAL}}
snippet else
	else:
		${0:${VISUAL}}
snippet elif
	elif ${1:cond}:
		${0:${VISUAL}}
snippet for
	for ${1:it} in ${2:coll}:
		${0}
snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as e:
		print(e)
snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}
snippet docs
	"""${0}."""
# LOGGING
snippet logi
	logger.info(${0:msg})
snippet logd
	logger.debug(${0:msg})
snippet loge
	logger.error(${0:msg})
snippet logw
	logger.warning(${0:msg})
snippet logc
	logger.critical(${0:msg})
# DEBUGGING
snippet pdb
	import pdb; pdb.set_trace()
snippet ipdb
	import ipdb; ipdb.set_trace()
# SCRIPTING
snippet #!
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
snippet #!2
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
snippet #!3
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
snippet here
	${0} = os.path.dirname(os.path.realpath(__file__))
