# string formating
snippet pp "print($0)"
pprint(${0})
endsnippet

snippet ppimp "import pprint"
from pprint import pprint as pp
endsnippet

snippet ft "'$0'.format()" i
"${0}".format()
endsnippet

# class

snippet init "Python Init method"
def __init__(self):
	$0
endsnippet

# script parts

snippet bang "python 3 shellbang"
#!/usr/bin/env python3
endsnippet

snippet coding "(for utf-8 files)"
# -*- coding: utf-8 -*-
endsnippet

# debugging

snippet ipdb "debugger breakpoint"
import ipdb; ipdb.set_trace()
endsnippet

# cli

snippet yesno "function for CLI confirmation"
def _yesno_question(question):
    while True:
        try:
            return strtobool(input(question).lower())
        except ValueError:
            print("Please respond with 'y' or 'n'.\n")
endsnippet

# scripting

snippet pymain "Python Main"
if __name__ == '__main__':
    args = sys.argv[1:]
	$0
endsnippet

snippet filedir "Path of current file directory"
os.path.dirname(os.path.abspath(__file__))
endsnippet

snippet pyscript "script template" b
#!/usr/bin/env python3

"""$0
"""

import argparse
import logging
import sys


def parse(arguments):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-v', '--verbose', action='store_true', help="Set logging level to INFO")

    return parser.parse_args(arguments)


if __name__ == '__main__':
    args = parse(sys.argv[1:])
    level = logging.INFO if args.verbose else logging.WARN
    logging.basicConfig(format="[%(levelname)s] %(asctime)s: %(message)s", level=level)

    logging.info('Done')
endsnippet
